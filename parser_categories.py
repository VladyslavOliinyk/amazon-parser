import time
import json
import random
import undetected_chromedriver as uc
from bs4 import BeautifulSoup
from fake_useragent import UserAgent


def run_parser():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ JSON.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –∏ False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    scraped_data = {}

    options = uc.ChromeOptions()
    ua = UserAgent(platforms='pc')
    user_agent = ua.random
    print(f"–ò—Å–ø–æ–ª—å–∑—É—é User-Agent: {user_agent}\n")
    options.add_argument(f'--user-agent={user_agent}')
    # –í–∫–ª—é—á–∞–µ–º headless —Ä–µ–∂–∏–º –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    options.add_argument('--headless')

    driver = None  # –û–±—ä—è–≤–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ finally
    try:
        driver = uc.Chrome(options=options)
        driver.maximize_window()

        # --- –≠–¢–ê–ü 1: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
        main_url = "https://www.amazon.com/gp/bestsellers"
        print(f"–≠–¢–ê–ü 1: –ó–∞—Ö–æ–∂—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–±–æ—Ä–∞ —Å—Å—ã–ª–æ–∫: {main_url}")
        driver.get(main_url)
        time.sleep(random.uniform(5, 8))

        print("...–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤...")
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(random.uniform(2, 4))

        soup = BeautifulSoup(driver.page_source, 'html.parser')

        categories_to_parse = []
        category_headers = soup.select('div.a-carousel-header-row')

        print(f"...–ù–∞–π–¥–µ–Ω–æ {len(category_headers)} –±–ª–æ–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–±–∏—Ä–∞—é —Å—Å—ã–ª–∫–∏...")
        for header_block in category_headers:
            category_name_element = header_block.select_one('h2.a-carousel-heading')
            see_more_link_element = header_block.select_one('a[aria-label*="See More"]')

            if category_name_element and see_more_link_element:
                name = category_name_element.get_text(strip=True)
                url = "https://www.amazon.com" + see_more_link_element['href']
                categories_to_parse.append({'name': name, 'url': url})
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{name}'")

        if not categories_to_parse:
            print("\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü—Ä–µ–∫—Ä–∞—â–∞—é —Ä–∞–±–æ—Ç—É.")
            return False

        # --- –≠–¢–ê–ü 2: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
        print("\n–≠–¢–ê–ü 2: –ù–∞—á–∏–Ω–∞—é –æ–±—Ö–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        for category in categories_to_parse:
            cat_name = category['name']
            cat_url = category['url']

            print(f"\n--- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: '{cat_name}' ---")
            driver.get(cat_url)
            delay = random.uniform(8, 13)
            print(f"  ...–¥–µ–ª–∞—é –ø–∞—É–∑—É –Ω–∞ {delay:.2f} —Å–µ–∫...")
            time.sleep(delay)

            page_soup = BeautifulSoup(driver.page_source, 'html.parser')

            product_list = page_soup.select_one('ol.a-ordered-list')
            if not product_list:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è '{cat_name}'.")
                continue

            product_cards = product_list.select('li.zg-no-numbers')
            if not product_cards:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è '{cat_name}'.")
                continue

            products_in_category = []
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(product_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫. –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–≤—ã—Ö 5.")

            for card in product_cards[:5]:
                try:
                    link_tag = card.select_one('a.a-link-normal')
                    product_url = "https://www.amazon.com" + link_tag['href'] if link_tag else None
                    rank = card.select_one('span.zg-bdg-text').get_text(strip=True)
                    title = card.select_one('div[class*="_cDEzb_p13n-sc-css-line-clamp-"]').get_text(strip=True)
                    image_url = card.select_one('img')['src']
                    rating = card.select_one('span.a-icon-alt').get_text(strip=True)
                    reviews_count = card.select_one('span.a-size-small').get_text(strip=True)

                    price_element = card.select_one('span._cDEzb_p13n-sc-price_3mJ9Z')
                    if price_element:
                        price = price_element.get_text(strip=True)
                    else:
                        offer_price_element = card.select_one('span.p13n-sc-price')
                        price = offer_price_element.get_text(strip=True) if offer_price_element else 'N/A'

                    products_in_category.append({
                        "rank": rank, "title": title, "url": product_url,
                        "image_url": image_url, "rating": rating,
                        "reviews_count": reviews_count, "price": price
                    })
                except Exception:
                    continue

            if products_in_category:
                scraped_data[cat_name] = products_in_category
                print(f"  üëç –°–æ–±—Ä–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {len(products_in_category)} —Ç–æ–≤–∞—Ä–∞—Ö.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å
        if scraped_data:
            with open('amazon_bestsellers_data.json', 'w', encoding='utf-8') as f:
                json.dump(scraped_data, f, ensure_ascii=False, indent=4)
            print(f"\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª.")
            return True
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
            return False

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return False
    finally:
        if driver:
            print("–ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...")
            driver.quit()


# –≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–∑–≤–æ–ª–∏—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä—Å–µ—Ä –Ω–∞–ø—Ä—è–º—É—é, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
if __name__ == "__main__":
    run_parser()
