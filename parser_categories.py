import requests
import json
from bs4 import BeautifulSoup
import sys

# !!! –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à API –∫–ª—é—á –æ—Ç ScrapingBee !!!
SCRAPINGBEE_API_KEY = "M00NT9JIDD7YT6OAYXX3MLX7WW878MN8UO1NF92SLLJ26SITDMMR76U2D8Z4ANX8XIX6QRES6TH22DGL"

def get_html(url):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ScrapingBee –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML."""
    print(f"  ...–æ—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ URL: {url}")
    response = requests.get(
        url='https://app.scrapingbee.com/api/v1/',
        params={
            'api_key': SCRAPINGBEE_API_KEY,
            'url': url,
            'render_js': 'true', # –ì–æ–≤–æ—Ä–∏–º ScrapingBee –≤—ã–ø–æ–ª–Ω–∏—Ç—å JavaScript –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            'wait_for': '#gridItemRoot, ol.a-ordered-list', # –ñ–¥–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        },
        timeout=120 # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –¥–æ 2 –º–∏–Ω—É—Ç
    )
    if response.status_code == 200:
        return response.text
    else:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç ScrapingBee: {response.status_code} {response.text}")
        return None

def parse_single_category(category_name, category_url):
    """–ü–∞—Ä—Å–∏—Ç –û–î–ù–£ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –ª–µ–≥–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã."""
    print(f"\n--- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: '{category_name}' ---")
    html = get_html(category_url)
    if not html:
        return []

    page_soup = BeautifulSoup(html, 'html.parser')
    
    product_list = page_soup.select_one('ol.a-ordered-list')
    if not product_list:
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (ol.a-ordered-list) –¥–ª—è '{category_name}'.")
        return []

    product_cards = product_list.select('li.zg-no-numbers')
    if not product_cards:
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (li.zg-no-numbers) –¥–ª—è '{category_name}'.")
        return []

    products_in_category = []
    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(product_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫. –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–≤—ã—Ö 5.")
    
    for card in product_cards[:5]:
        try:
            rank = card.select_one('span.zg-bdg-text').get_text(strip=True)
            title = card.select_one('div[class*="_cDEzb_p13n-sc-css-line-clamp-"]').get_text(strip=True)
            image_url = card.select_one('img')['src']
            rating = card.select_one('span.a-icon-alt').get_text(strip=True)
            reviews_count = card.select_one('span.a-size-small').get_text(strip=True)
            link_tag = card.select_one('a.a-link-normal')
            product_url = "https://www.amazon.com" + link_tag['href'] if link_tag and link_tag.get('href') else None
            
            price_element = card.select_one('span._cDEzb_p13n-sc-price_3mJ9Z, span.p13n-sc-price')
            price = price_element.get_text(strip=True) if price_element else 'N/A'
            
            products_in_category.append({
                "rank": rank, "title": title, "url": product_url, "image_url": image_url,
                "rating": rating, "reviews_count": reviews_count, "price": price
            })
        except Exception:
            continue
    
    print(f"  üëç –°–æ–±—Ä–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {len(products_in_category)} —Ç–æ–≤–∞—Ä–∞—Ö.")
    return products_in_category

def run_parser():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä."""
    categories_to_parse = [
        {'name': 'Best Sellers in Automotive', 'url': 'https://www.amazon.com/gp/bestsellers/automotive/'},
        {'name': 'Best Sellers in Electronics', 'url': 'https://www.amazon.com/gp/bestsellers/electronics/'},
        {'name': 'Best Sellers in Clothing, Shoes & Jewelry', 'url': 'https://www.amazon.com/gp/bestsellers/fashion/'},
        {'name': 'Best Sellers in Kitchen & Dining', 'url': 'https://www.amazon.com/gp/bestsellers/kitchen/'},
        {'name': 'Best Sellers in Beauty & Personal Care', 'url': 'https://www.amazon.com/gp/bestsellers/beauty/'},
        {'name': 'Best Sellers in Tools & Home Improvement', 'url': 'https://www.amazon.com/gp/bestsellers/hi/'},
    ]
    print(f"–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ {len(categories_to_parse)} –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ ScrapingBee...")
    
    final_data = {}
    for category in categories_to_parse:
        products = parse_single_category(category['name'], category['url'])
        if products:
            final_data[category['name']] = products
    
    if not final_data:
        print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", file=sys.stderr)
        return False

    with open('amazon_bestsellers_data.json', 'w', encoding='utf-8') as f:
        json.dump(final_data, f, ensure_ascii=False, indent=4)
    
    print("\n–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω. –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    return True

if __name__ == '__main__':
    run_parser()

