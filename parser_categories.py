import time
import json
import random
import undetected_chromedriver as uc
from bs4 import BeautifulSoup
from fake_useragent import UserAgent
import sys

def create_driver():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    options = uc.ChromeOptions()
    ua = UserAgent(platforms='pc')
    user_agent = ua.random
    
    options.add_argument(f'--user-agent={user_agent}')
    # –≠—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –Ω–∞ Render
    options.add_argument('--headless=new')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-gpu')
    options.add_argument('--window-size=1920,1080')
    
    # –û–ø—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è "—à—É–º–∞" –≤ –ª–æ–≥–∞—Ö. –û–±–µ—Ä–Ω—É—Ç–∞ –≤ try-except –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    try:
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
    except Exception:
        pass
    
    return uc.Chrome(options=options)

def parse_single_category(category_name, category_url):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –û–î–ù–û–ô –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    –≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–µ–¥ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞–º—è—Ç–∏.
    """
    print(f"\n--- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: '{category_name}' ---")
    driver = None
    try:
        driver = create_driver()
        driver.get(category_url)
        
        delay = random.uniform(8, 13)
        print(f"  ...–¥–µ–ª–∞—é –ø–∞—É–∑—É –Ω–∞ {delay:.2f} —Å–µ–∫...")
        time.sleep(delay)
        
        page_soup = BeautifulSoup(driver.page_source, 'html.parser')
        
        # –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –ª–µ–∂–∞—Ç –í–°–ï —Ç–æ–≤–∞—Ä—ã.
        product_list = page_soup.select_one('ol.a-ordered-list')
        
        if not product_list:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (ol.a-ordered-list) –¥–ª—è '{category_name}'.")
            return []

        # –í–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–∞—Ö–æ–¥–∏–º –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã-–∫–∞—Ä—Ç–æ—á–∫–∏.
        product_cards = product_list.select('li.zg-no-numbers')
        
        if not product_cards:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (li.zg-no-numbers) –¥–ª—è '{category_name}'.")
            return []

        products_in_category = []
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(product_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫. –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–≤—ã—Ö 5.")
        
        for card in product_cards[:5]:
            try:
                rank = card.select_one('span.zg-bdg-text').get_text(strip=True)
                title = card.select_one('div[class*="_cDEzb_p13n-sc-css-line-clamp-"]').get_text(strip=True)
                image_url = card.select_one('img')['src']
                rating = card.select_one('span.a-icon-alt').get_text(strip=True)
                reviews_count = card.select_one('span.a-size-small').get_text(strip=True)
                link_tag = card.select_one('a.a-link-normal')
                product_url = "https://www.amazon.com" + link_tag['href'] if link_tag and link_tag.get('href') else None
                
                price_element = card.select_one('span._cDEzb_p13n-sc-price_3mJ9Z, span.p13n-sc-price')
                price = price_element.get_text(strip=True) if price_element else 'N/A'
                
                products_in_category.append({
                    "rank": rank, "title": title, "url": product_url, "image_url": image_url,
                    "rating": rating, "reviews_count": reviews_count, "price": price
                })
            except Exception:
                continue
        
        print(f"  üëç –°–æ–±—Ä–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {len(products_in_category)} —Ç–æ–≤–∞—Ä–∞—Ö.")
        return products_in_category

    finally:
        if driver:
            driver.quit()
            print("  ...–¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫—Ä—ã—Ç, –ø–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞.")

def run_parser():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä. –°–æ–±–∏—Ä–∞–µ—Ç URL –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∞ –∑–∞—Ç–µ–º
    –≤ —Ü–∏–∫–ª–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö.
    """
    main_driver = None
    categories_to_parse = []
    try:
        print("–≠–¢–ê–ü 1: –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Å—ã–ª–æ–∫...")
        main_driver = create_driver()
        main_driver.get("https://www.amazon.com/gp/bestsellers")
        time.sleep(random.uniform(5, 8))
        main_driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(random.uniform(2, 4))

        soup = BeautifulSoup(main_driver.page_source, 'html.parser')
        
        category_headers = soup.select('div.a-carousel-header-row')
        
        for header_block in category_headers:
            name_el = header_block.select_one('h2.a-carousel-heading')
            link_el = header_block.select_one('a[aria-label*="See More"]')
            if name_el and link_el and link_el.get('href'):
                categories_to_parse.append({
                    'name': name_el.get_text(strip=True), 
                    'url': "https://www.amazon.com" + link_el['href']
                })
        
        print(f"–≠–¢–ê–ü 1 –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(categories_to_parse)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
    finally:
        if main_driver:
            main_driver.quit()
            print("...–≥–ª–∞–≤–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ —Å—Å—ã–ª–æ–∫ –∑–∞–∫—Ä—ã—Ç.")

    if not categories_to_parse:
        print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å URL –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", file=sys.stderr)
        return False

    # --- –≠–¢–ê–ü 2: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
    print("\n–≠–¢–ê–ü 2: –ù–∞—á–∏–Ω–∞—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    final_data = {}
    for category in categories_to_parse:
        products = parse_single_category(category['name'], category['url'])
        if products:
            final_data[category['name']] = products
    
    if not final_data:
        print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", file=sys.stderr)
        return False

    with open('amazon_bestsellers_data.json', 'w', encoding='utf-8') as f:
        json.dump(final_data, f, ensure_ascii=False, indent=4)
    
    print("\n–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω. –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    return True

if __name__ == '__main__':
    run_parser()

